package circuits

import (
	"errors"
	"math/big"

	core "github.com/iden3/go-iden3-core"
	"github.com/iden3/go-iden3-crypto/babyjub"
	"github.com/iden3/go-merkletree-sql"
)

const (
	// IDStateVerificationKey is verification key to verify auth circuit
	IDStateVerificationKey VerificationKeyJSON = `{"protocol":"groth16","curve":"bn128","nPublic":2,"vk_alfa_1":["20491192805390485299153009773594534940189261866228447918068658471970481763042","9383485363053290200918347156157836566562967994039712273449902621266178545958","1"],"vk_beta_2":[["6375614351688725206403948262868962793625744043794305715222011528459656738731","4252822878758300859123897981450591353533073413197771768651442665752259397132"],["10505242626370262277552901082094356697409835680220590971873171140371331206856","21847035105528745403288232691147584728191162732299865338377159692350059136679"],["1","0"]],"vk_gamma_2":[["10857046999023057135944570762232829481370756359578518086990519993285655852781","11559732032986387107991004021392285783925812861821192530917403151452391805634"],["8495653923123431417604973247489272438418190587263600148770280649306958101930","4082367875863433681332203403145435568316851327593401208105741076214120093531"],["1","0"]],"vk_delta_2":[["15753686060851944548846408025738658940904310172642621192497959220412723917416","14035429731084620631770950974915003675949783634318821886635696560309531316283"],["16786536714010473892728976514785914180120201745124136073645412932398579554201","15905456896923404554335181437119759465143534933545882232030797414626489560361"],["1","0"]],"vk_alphabeta_12":[[["2029413683389138792403550203267699914886160938906632433982220835551125967885","21072700047562757817161031222997517981543347628379360635925549008442030252106"],["5940354580057074848093997050200682056184807770593307860589430076672439820312","12156638873931618554171829126792193045421052652279363021382169897324752428276"],["7898200236362823042373859371574133993780991612861777490112507062703164551277","7074218545237549455313236346927434013100842096812539264420499035217050630853"]],[["7077479683546002997211712695946002074877511277312570035766170199895071832130","10093483419865920389913245021038182291233451549023025229112148274109565435465"],["4595479056700221319381530156280926371456704509942304414423590385166031118820","19831328484489333784475432780421641293929726139240675179672856274388269393268"],["11934129596455521040620786944827826205713621633706285934057045369193958244500","8037395052364110730298837004334506829870972346962140206007064471173334027475"]]],"IC":[["19297919417399184394532324181597658329834075232866100019152812814859397268431","14699022357013157061045807542966925633990406674376276222050022522196639447960","1"],["6388362365563994994798769018624399476157773300166350845180279774476505983730","1217648947419151894183447372833203907938938673770764619682641601131531973167","1"],["3126272743831125875461477201504235660379019590657876897422768240259895227533","2925084377602205004508382849819352668757030527242022365611757402467366851533","1"]]}`

	// IDStatePublicSignalsSchema is schema to parse json data for additional information in auth circuit
	IDStatePublicSignalsSchema PublicSchemaJSON = `{"user_identifier":0,"challenge":1}`
)

// IDStateLevels is number of levels currently used by idState circuits
const IDStateLevels = 4

// IDStateCircuit represents idState circuit
type IDStateCircuit struct {
}

// nolint // common approach to register default supported circuit
func init() {
	RegisterCircuit(IDStateCircuitID, &IDStateCircuit{})
}

// PrepareInputs returns inputs for id state circuit as map
func (c *IDStateCircuit) PrepareInputs(in TypedInputs) (map[string]interface{}, error) {

	ownerShipInputs, ok := in.(IDOwnershipGenesisInputs)
	if !ok {
		return nil, errors.New("wrong type of input arguments")
	}
	inputs := make(map[string]interface{})
	inputs["id"] = ownerShipInputs.GenesisID.BigInt().String()
	inputs["oldIdState"] = ownerShipInputs.LatestState.BigInt().String()
	inputs["userPrivateKey"] = (*big.Int)(ownerShipInputs.SK).String()

	inputs["siblings"] = bigIntArrayToStringArray(
		PrepareSiblings(ownerShipInputs.SiblingsMTP, IDStateLevels))
	inputs["claimsTreeRoot"] = ownerShipInputs.ClaimsTreeRoot.BigInt().String()
	// -- inputs["revTreeRoot"] = ownerShipInputs.RevTreeRoot.BigInt().String()
	inputs["newIdState"] = ownerShipInputs.NewState.BigInt().String()
	return inputs, nil
}

// GetVerificationKey returns key to verify proof
func (c *IDStateCircuit) GetVerificationKey() VerificationKeyJSON {
	return IDStateVerificationKey
}

// GetPublicSignalsSchema returns schema to parse public inputs
func (c *IDStateCircuit) GetPublicSignalsSchema() PublicSchemaJSON {
	return IDStatePublicSignalsSchema
}

// IDOwnershipGenesisInputs ZK inputs
type IDOwnershipGenesisInputs struct {
	GenesisID      *core.ID
	ClaimsTreeRoot *merkletree.Hash
	RevTreeRoot    *merkletree.Hash
	SK             *babyjub.PrivKeyScalar
	SiblingsMTP    []*merkletree.Hash
	LatestState    *merkletree.Hash
	NewState       *merkletree.Hash
	TypedInputs
}
